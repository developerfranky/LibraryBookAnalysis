qplot(samples)
samples <- rnorm(100, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(1000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(1000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(1000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(10000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(10000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(1000000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(1000000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(1000000, mean = 160, sd = 14)
qplot(samples)
samples <- rnorm(1000000, mean = 1, sd = 1)
qplot(samples)
samples <- rnorm(1000000, mean = 0, sd = 1)
qplot(samples)
samples <- rnorm(100, mean = 0, sd = 1)
qplot(samples)
samples <- rnorm(10, mean = 0, sd = 1)
qplot(samples)
samples
.13*14+160
data_url <- "http://assets.datacamp.com/course/compfin/sbuxPrices.csv"
sbux_df <- read.csv(data_url, header = T, stringsAsFactors = F)
str(sbux_df)
sbux_df
closing_prices <- sbux_df[,"Adj.Close", drop = F]
# Find indices associated with the dates 3/1/1994 and 3/1/1995
index_1 <- which(sbux_df$Date == "3/1/1994")
index_2 <- which(sbux_df$Date == "3/1/1995")
# Extract prices BETWEEN 3/1/1994 and 3/1/1995
some_prices <- sbux_df[index_1:index_2,"Adj.Close"]
# Create a new data frame that contains the price data with the dates as the row names
sbux_prices_df <- sbux_df[, "Adj.Close", drop=FALSE]
rownames(sbux_prices_df) <- sbux_df$Date
head(sbux_prices_df)
# With Dates as rownames, you can subset directly on the dates.
# Find indices associated with the dates 3/1/1994 and 3/1/1995.
price_1 <- sbux_prices_df["3/1/1994", 1]
price_2 <- sbux_prices_df["3/1/1995", 1]
plot(sbux_df$Adj.Close, type = "l", col = "blue", ylab = "Adjusted close", main = "Monthly closing price of SBUX", lwd=2)
legend(x='topleft',legend='SBUX', lty=1, lwd=2, col='blue')
#Returns = Price(month t) − Price(month (t - 1) ) /  Price(month t - 1)
# Denote n the number of time periods
n <- nrow(sbux_prices_df)
#now use the formula. vector from 2 to last - vector from 1st to second to last
# divided by vector from first to second to last
sbux_ret <- ( sbux_prices_df[2:n,1] - sbux_prices_df[1:(n-1),1] ) / sbux_prices_df[1:(n-1),1]
# Notice that sbux_ret is not a data frame object
class(sbux_ret)
# Now add dates as names to the vector and print the first elements of sbux_ret to the console to check
mynames <- sbux_df[2:n,1]
names(sbux_ret) <- mynames
head(sbux_ret)
# Now w'ell calculuate the cc returns. rt = ln(1 + Rt)
# Denote n the number of time periods. We also need the simple returns:
n <- nrow(sbux_prices_df)
sbux_ret <- ((sbux_prices_df[2:n, 1] - sbux_prices_df[1:(n-1), 1])/sbux_prices_df[1:(n-1), 1])
# Compute continuously compounded 1-month returns
sbux_ccret2 <- log(sbux_prices_df[2:n,1]) - log(sbux_prices_df[1:(n-1),1])
sbux_ccret <-  log(sbux_ret + 1)
# Assign names to the continuously compounded 1-month returns
names(sbux_ccret) <- sbux_df[2:n,1]
names(sbux_ccret2) <- sbux_df[2:n,1]
# Show sbux_ccret
View(sbux_ccret)
View(sbux_ccret2)
samples <- rnorm(10, mean = 0, sd = 1)
qplot(samples)
# Assign the URL to the CSV file
data_url <- "http://assets.datacamp.com/course/compfin/sbuxPrices.csv"
# Load the data frame using read.csv
sbux_df <- read.csv(data_url, header = T, stringsAsFactors = F)
# Check the structure of 'sbux_df'
str(sbux_df)
# Check the first and last part of 'sbux_df'
head(sbux_df)
tail(sbux_df)
# Get the closs of the Date column of 'sbux_df'
class(sbux_df$Date)
closing_prices <- sbux_df[,"Adj.Close", drop = F]
# typeof(sbux_df[,"Adj.Close", drop = F]) = list
# Find indices associated with the dates 3/1/1994 and 3/1/1995
index_1 <- which(sbux_df$Date == "3/1/1994")
index_2 <- which(sbux_df$Date == "3/1/1995")
# Extract prices BETWEEN 3/1/1994 and 3/1/1995
some_prices <- sbux_df[index_1:index_2,"Adj.Close"]
# Create a new data frame that contains the price data with the dates as the row names
sbux_prices_df <- sbux_df[, "Adj.Close", drop=FALSE]
rownames(sbux_prices_df) <- sbux_df$Date
head(sbux_prices_df)
# With Dates as rownames, you can subset directly on the dates.
# Find indices associated with the dates 3/1/1994 and 3/1/1995.
price_1 <- sbux_prices_df["3/1/1994", 1]
price_2 <- sbux_prices_df["3/1/1995", 1]
plot(sbux_df$Adj.Close, type = "l", col = "blue", ylab = "Adjusted close", main = "Monthly closing price of SBUX", lwd=2)
legend(x='topleft',legend='SBUX', lty=1, lwd=2, col='blue')
#Returns = Price(month t) − Price(month (t - 1) ) /  Price(month t - 1)
# Denote n the number of time periods
n <- nrow(sbux_prices_df)
#now use the formula. vector from 2 to last - vector from 1st to second to last
# divided by vector from first to second to last
sbux_ret <- ( sbux_prices_df[2:n,1] - sbux_prices_df[1:(n-1),1] ) / sbux_prices_df[1:(n-1),1]
# Notice that sbux_ret is not a data frame object
class(sbux_ret)
# Now add dates as names to the vector and print the first elements of sbux_ret to the console to check
mynames <- sbux_df[2:n,1]
names(sbux_ret) <- mynames
head(sbux_ret)
# Now w'ell calculuate the cc returns. rt = ln(1 + Rt)
# Denote n the number of time periods. We also need the simple returns:
n <- nrow(sbux_prices_df)
sbux_ret <- ((sbux_prices_df[2:n, 1] - sbux_prices_df[1:(n-1), 1])/sbux_prices_df[1:(n-1), 1])
# Compute continuously compounded 1-month returns
sbux_ccret2 <- log(sbux_prices_df[2:n,1]) - log(sbux_prices_df[1:(n-1),1])
sbux_ccret <-  log(sbux_ret + 1)
# Assign names to the continuously compounded 1-month returns
names(sbux_ccret) <- sbux_df[2:n,1]
names(sbux_ccret2) <- sbux_df[2:n,1]
# Show sbux_ccret
View(sbux_ccret)
View(sbux_ccret2)
# Compare the simple and cc returns
head(cbind(sbux_ret,sbux_ccret))
ret_compare <- cbind(sbux_ret,sbux_ccret)
View(ret_compare)
plot(sbux_ret, type="l", col="blue", lwd=2, ylab="Return",
main="Monthly Returns on SBUX")
abline(h=0)
legend(x="bottomright", legend=c("Simple", "CC"),
lty=1, lwd=2, col=c("blue","red"))
lines(sbux_ccret, col = "red", lwd=2)
sbux_gret
sbux_gret <- sbux_ret + 1
sbux_gret
sbux_fv <- cumprod(sbux_gret)
cumprod(sbux_gret)
pnorm(1)
pnorm(0)
pnorm(2)
pnorm(3)
pnorm(3) - pnorm(-3)
pnorm(1) - pnorm(-1)
qnorm(0.5)
qnorm(67)
qnorm(0.67)
pnorm(0)
qnorm(0.01)
qnorm(0.05)
qnorm(0.025)
qnorm(0.005)
3.14*3*3*3
250*1.07^9
3!
??factorial
factorial(4)
factorial(11)/(factorial(4)* factorial(4) * factorial(3))
51*50*49*48*47*46
choose(51, 6)
choose(10,2)*choose(11,2)
choose(55, 5)
choose(55,3)*choose(41,2)
169/52^2
1/16
choose(14, 4)
8/14
choose(14, 4)*(8/14)^4*(6/14)^0
choose(14, 4)*(8/14)^4
choose(6,2)*choose(7,2)
choose(13,7)
choose(6,2)*choose(7,5)
315/1716
choose(6,2)*choose(7,5)
choose(13,7)
choose(52,8)
choose(4,4)*choose(4,4)
26^2*10000
??permutation
??combination
6*(-0.2)
6*(0.4)
-2(-0.2)
-2*(-0.2)
.5^2+.4^2
sqrt(.5^2+.4^2)
sqrt(2.5^2+.4^2)
2.531798+0.6403124
3.1-6.50
sqrt(1.7)
.5*.5
2^12
2^13
8191*4096
2^43112609
1+2+3+4+5+6+7+8+9+10+11+12+13+14+!1+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30
1+2+3+4+5+6+7+8+9+10+11+12+13+14+!1+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50
1+2+3+4+5+6+7+8+9+10+11+12+13+14+!1+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50
1+2+3+4+5+6+7+8+9+10+11+12+13+14+!1+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50
1+2+3+4+5+6+7
1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31
117000*1.015
117000*1.015-1125
117630/0.006
117000*0.015
117000*0.015+1125
117000*0.015-1125
630/0.006
105000*0.009
1125-945
180/0.015
.14^4
2439/170560
??factor
0 + 50000*.24+100000*.06+150000*0.03+200000*0.01+250000*0.01
21/10000000
1-21/10000000
0.000002.1*(-100000) + 0.9999979*(1)
0.0000021*(-100000) + 0.9999979*(1)
(18/38)*(8) + (20/38)*(-8)
(180000)*(0.1) + (-20000)*(0.9)
?permutations
factorial(8)/factorial(5)
choose(51, 6)
choose(8,3)*choose(8,4)
11.8+18.8+2.8+4.4+.3+1.1
2.8/39.2
choose(42,5)*32
1/choose(42,5)*32
42*41*40*39*38*32
choose(5,2)*choose(7,4)
300+70+500+180+380
300+70+500+180+380-60
13*4
1/(17^2)
1/(17^3)
1-(10/17)
(16/17)^10
29.7+9.6
29.7+9.6/101.8
(29.7+9.6)/101.8
32500-13000
(0.4)*(19500)+(0.6)*(-13000)
(0.1)*(46700)+(0.9)*(-1300)
26^3*10^2
47*300
3900+34*300
2440*.05
24400*.05
24400 + (24400*.05)
39000*(1+0.055)^3
choose(6,4)
choose(6,4)*choose(7,5)
24*94
24/94
12/47
30/(17*18)
5/51
62.8/111.8
10000000-28
(28/10000000)(-99999)+(1)(9999972)
(28/10000000)*(-99999)+(1)*(9999972)
(28/10000000)*(-99999)+(1)*(9999972/10000000)
3^7
8*(140)+*70)*4
8*(140)+(*)70)*4
8*(140)+(70)*4
8*(0)+(210)*4
(0.55-0.50)/(sqrt(0.50*(0.50)/104))
(7.78 - 8) / ((1.08) / sqrt(32) )
110*500-77000
110*850-77000
77000/110
4.8/.2
19*64
19*64/36
sqrt(14/29.141)*1.54
sqrt(14/4.66)*1.54
0.26/(6.8*4)
20.26 + (2.131)/4
20.26 - (2.131)/4
20.26 + (2.131*6.8)/4
20.26 - (2.131*6.8)/4
20.76 + 3.63
20.76 - 3.63
1/10 - 1/35
(1/10 - 1/35)^-1
pi
(2pi*4*7.5e-6)^-1
(2*pi*4*7.5e-6)^-1
(2*pi*4*(7.5e-6))^-1
(2*pi*4*(7.5))^-1
(2*pi*4*(7.5e-6))^-1
17^2
+100
17^2+100
(17^2+100)^.5
log(11/590) / 70
590*e^(-.057*100)
590*exp(-.057*100)
590*exp(-.057*70)
590*exp(-.057*71)
590*exp(-.057*80)
590*exp(-.057*100)
log(2)/5
400*exp(0.1386*10)
400*exp(0.1386*5)
400*exp(0.1386*15)
log(4)/5
log(10)/0.2772589
log(10)/0.277
log(0.5)/30
y = 50*e^(-.0231*100)
50*exp(-.0231*100)
factorial(11)
factorial(11) / (factorial(4)*factorial(4)*factorial(2) )
choose(60,3) * chooose(40,2)
choose(60,3) * choose(40,2)
choose(60,3)
choose(40,2)
2^3 * 3 * 5^2 * 11*13
(1/8)*6^2 + (-3/4)*6
(1/8)*8^2 + (-3/4)*8
36*-4
64*3
7.8/sqrt(6)
7.8/sqrt(5)
7.8/sqrt(7)
135.00 + 131.50 + 132.00 + 125.90 + 108.50 + 122.50 + 120.00 + 116.50 + 121.01 + 123.50 + 137.50
mean(c(135.00 ,131.50 ,132.00 ,125.90 ,108.50 ,122.50,120.00,116.50, 121.01, 123.50, 137.50))
* -.84(68/2.51)
(68/2.51)* -.84
191-(-22.75)*3.03
419-160
demo()
library(dplyr)
library(ggplot2)
setwd("C:/Users/root/Documents/SJC_Library/")
data_dir <- '.'
records <- data.frame(read.csv("MCE_Historical_Transactions.csv"), stringsAsFactors=F)
View(records)
records$CHARGE_LOCATION <- NULL
records$CHARGE_LOCATION <- NULL
names(records)[3] <- "TYPE"
names(records)[5] <- "CHECK_OUT"
names(records)[6] <- "RETURN"
records <- transform(records,CHECK_OUT= as.POSIXct(CHECK_OUT, format="%m/%d/%y %I:%M %p"))
records <- transform(records,RETURN= as.POSIXct(RETURN, format="%m/%d/%y %I:%M %p"))
View(records)
nrow(recods)
nrow(records)
records <- mutate(records, CO_DATE = strftime(CHECK_OUT, format = "%F"),
RET_DATE = strftime(CHECK_OUT, format = "%F"),
CO_TIME = as.numeric(as.POSIXct(CHECK_OUT, origin = "1970-01-01")),
RET_TIME = as.numeric(as.POSIXct(RETURN, origin = "1970-01-01")),
DURATION_OUT = RET_TIME - CO_TIME
)
View(records)
records <- records[as.character(records$CO_DATE) > "2006-01-01" &
as.character(records$CO_DATE) < "2015-01-01" ,]
all_titles <- unique(records[,"TITLE"], drop = F )
types <- unique(records$TYPE)
levels(records$TYPE) <- c("Video", "Reserve 2HR", "Audio Cassette", "Book", "CD", "Laptop",
"Laptop", "Periodical", "Reference Book", "Special Collection", "DVD")
records$TYPE[records$TITLE == "[Headphone]"] <- "Reserve 2HR"
records$TYPE[records$TITLE == "Clickers Set"] <- "Reserve 2HR"
records <- records[!duplicated(records[c("TITLE", "CALL_NO","CHECK_OUT", "RETURN")]), ]
rownames(records) <- NULL
nrow(records)
View(recods)
View(records)
book <- filter(records, records$TYPE == "Book"); nrow(book); #29274
book_titles <- unique(book$TITLE); NROW(book_titles); #10335
laptop <- filter(records, records$TYPE == "Laptop"); nrow(laptop); #4660
laptop_titles <- unique(laptop$TITLE); NROW(laptop_titles); #4
special <- filter(records, records$TYPE == "Special Collection");nrow(special); #65
special_titles <- unique(special$TITLE); NROW(special_titles); #20
dvd <- filter(records, records$TYPE == "DVD"); nrow(dvd); #843
dvd_titles <- unique(dvd$TITLE); NROW(dvd_titles); #302
cd <- filter(records, records$TYPE == "CD"); nrow(cd); #666
cd_titles <- unique(cd$TITLE); NROW(cd_titles); #54
video <- filter(records, records$TYPE == "Video"); nrow(video); #178
video_titles <- unique(video$TITLE); NROW(video_titles); #71
reference <- filter(records, records$TYPE == "Reference Book"); nrow(reference); #350
reference_titles <- unique(reference$TITLE); NROW(reference_titles); #54
reserve <- filter(records, records$TYPE == "Reserve 2HR"); nrow(reserve); #3157
reserve_titles <- unique(reserve$TITLE); NROW(reserve_titles); #19
cassette <- filter(records, records$TYPE == "Audio Cassette"); nrow(cassette); #13
cassette_titles <- unique(cassette$TITLE); NROW(cassette_titles); #6
periodical <- filter(records, records$TYPE == "Periodical"); nrow(periodical); #7
periodical_titles <- unique(periodical$TITLE); NROW(periodical_titles); #4
View(dvd)
View(laptop)
bc <-intersect( book_titles, cd_titles) #7
dv <-intersect( dvd_titles, video_titles) #11
bs <-intersect( book_titles, special_titles) #2
br <-intersect( book_titles, reference_titles) #5
duplicates <- Reduce(union, list(bc,dv, bs, br))
double_category <- lapply(duplicates, function(x) {
filter(records, TITLE == x) %>% group_by(TITLE, CALL_NO, TYPE) %>% summarize(NUM = n())
})
double_category <-as.data.frame(do.call(rbind, double_category))
special_top <- arrange(special %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
reference_top <- arrange(reference %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
reserve_top <- arrange(reserve %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
book_top <- arrange(book %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
cassette_top <- arrange(cassette %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
cd_top <- arrange(cd %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
dvd_top <- arrange(dvd %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
video_top <- arrange(video %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
periodical_top <- arrange(periodical %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
laptop_top <- arrange(laptop %>% group_by(TITLE) %>% summarize(NUM_TRANS = n()), desc(NUM_TRANS))
book_top
dvd_top
top_type <- records %>% group_by(TYPE) %>% summarize(NUM = n())
View(arrange(top_type, desc(NUM)))
books_daily <- all_books %>% group_by(DAY = CO_DATE) %>% summarize(TOTAL = n())
top_type <- records %>% group_by(TYPE) %>% summarize(NUM = n())
View(arrange(top_type, desc(NUM)))
all_books <- rbind(special, reference, book)
View(all_books)
books_daily <- all_books %>% group_by(DAY = CO_DATE) %>% summarize(TOTAL = n())
View(books_daily)
View(arrange(books_daily, desc(TOTAL)))
mean(books_daily$TOTAL)
median(books_daily$TOTAL)
ggplot(books_daily, aes(x = DAY, y = TOTAL) ) + geom_point()
books_daily <- all_books %>% group_by(DAY = CO_DATE) %>% summarize(TOTAL = n())
ggplot(books_daily, aes(x = DAY, y = TOTAL) ) + geom_point()
View(books_daily)
books_daily <- all_books %>% group_by(DAY = CO_DATE) %>% summarize(TOTAL = n())
View(books_daily)
ggplot(books_daily, aes(x = CO_DATE, y = TOTAL) ) + geom_point()
books_monthly <- all_books %>% group_by(MONTH = substring(CO_DATE, 1,7)) %>% summarize(TOTAL = n())
books_monthly <- transform(books_monthly,
SEMESTER = ifelse(
as.numeric(substring(MONTH, 6,7)) <=11 & as.numeric(substring(MONTH,6,7)) >= 9, "FALL",
ifelse(as.numeric(substring(MONTH, 6,7))==12 | as.numeric(substring(MONTH,6,7)) == 1, "WINTER_BREAK",
ifelse(as.numeric(substring(MONTH, 6,7)) <=8 & as.numeric(substring(MONTH,6,7)) >= 5, "SUMMER","SPRING")))
)
View(books_monthly)
p <- ggplot(books_monthly, aes(x = MONTH, y = TOTAL, group = 1) ) + geom_line(aes(color=books_monthly$SEMESTER))
p <- p + geom_point(aes(color=books_monthly$SEMESTER))
p <- p + theme(legend.position = c(.1,.9),
legend.title=element_blank(),
axis.text.x=element_text(angle=65, hjust=1),
legend.background = element_rect(fill = "transparent"))
p
books_daily_average <- all_books %>%
group_by(DAY = strftime(all_books$CHECK_OUT, format = "%m-%d")) %>%
summarize(TOTAL = n())
View(books_daily_average)
p <- ggplot(books_daily_average, aes(x = DAY, y = TOTAL, group = 1) ) + geom_line()
p <- p + geom_point()
p <- p + theme(legend.position = c(.1,.9),
legend.title=element_blank(),
axis.text.x=element_text(angle=65, hjust=1),
legend.background = element_rect(fill = "transparent"))
p
nrow(all_books) #29662
NROW(unique(all_books$CO_DATE)) #2396
x <- all_books %>%
group_by(DAY = strftime(all_books$CHECK_OUT, format = "%m-%d")) %>%
summarize(MEAN = n()/9)
a <- ggplot(all_books, aes(x = DAY, y = MEAN, group = 1) ) + geom_line()
View(books_daily_average)
View(x)
sum(x$MEAN)
mean(all_books$DURATION_OUT) / (60*60*24)
median(all_books$DURATION_OUT) / (60*60*24)
locc <- data.frame(read.csv("locc.csv"), stringsAsFactors=F)
names(locc)[1] <- "PREFIX"
names(locc)[2] <- "Subject Area"
view(locc)
View(locc)
dewey <- data.frame(read.csv("dewey.csv", header= F), stringsAsFactors=F)
names(dewey)[1] <- "PREFIX"
names(dewey)[2] <- "Subject Area"
View(dewey)
all_books <- transform(all_books, PREFIX = substring(CALL_NO, 1,1))
all_books <- arrange(all_books, desc(CO_DATE))
dewey_books <- filter(all_books, !is.na(as.numeric(as.character(all_books$PREFIX))))
locc_books <- filter(all_books, is.na(as.numeric(as.character(all_books$PREFIX))))
locc_books <- merge(locc_books, locc, by="PREFIX")
dewey_books <- merge(dewey_books, dewey, by="PREFIX")
dist_locc <- locc_books %>% group_by("Subject Area") %>% summarize(NUM = n())
dist_dewey <- dewey_books %>% group_by("Subject Area") %>% summarize(NUM = n())
dist_dewey_year <- dewey_books %>% group_by("Subject Area", CO_DATE) %>% summarize(NUM = n())
View(dewey_books)
View(locc_books)
qmap("manhattan")
library(ggmap)
qmap("manhattan")
p <- ggplot(books_daily_average, aes(x = DAY, y = TOTAL, group = 1) ) + geom_line()
p <- p + geom_point()
p <- p + theme(legend.position = c(.1,.9),
legend.title=element_blank(),
axis.text.x=element_text(angle=65, hjust=1),
legend.background = element_rect(fill = "transparent"))
p
x <- head(records)
x
x[2,0]
x[2,]
x[,2]
x[3,]
